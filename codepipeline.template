{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This nested template will create all the resources needed for CodePipeline",
  "Parameters": {
    "GitHubToken":{
      "NoEcho":"true",
      "Type":"String",
      "Default": "",
      "Description":"Enter your Github OAuth Secret created in settings for the repo. It might look something like 9b189a1654643522561f7b3ebd44a1531a4287af OAuthToken with access to Repo. Go to https://github.com/settings/tokens"
    },
    "GitHubUser":{
      "Type":"String",
      "Description":"Enter your GitHub UserName",
      "Default":"Able710"
    },
    "Repo":{
      "Type":"String",
      "Description":"Enter the GitHub Repo name to pull from. Only the Name. not the URL",
      "Default":"aws-apigateway-slackpost"
    },
    "Branch":{
      "Type":"String",
      "Description":"Enter the Branch to use from Repo. Only the Name. not the URL",
      "Default": "master"
    },
    "codePipelineBucket": {
      "Type": "String",
      "Default": "able710-buildbucket",
      "Description": "Enter the S3 bucket name that CodePipeline uses to pull the repository code from Github into."
    },
    "StackActionMode": {
      "Type": "String",
      "Default": "CREATE_UPDATE",
      "Description": "Enter the action CloudFormation will use when deploying cloudformation.template. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/continuous-delivery-codepipeline-action-reference.html.",
      "AllowedValues": [
        "CHANGE_SET_EXECUTE",
        "CHANGE_SET_REPLACE",
        "CREATE_UPDATE",
        "DELETE_ONLY",
        "REPLACE_ON_FAILURE"
      ]
    },
    "StackName": {
      "Type": "String",
      "Default": "Slack-APIGateway",
      "Description": "Enter the name of the CloudFormation stack cloudformation.template is deployed by CodePipeline."
    },
    "UnencryptedHookURL": {
      "Type": "String",
      "Default": "",
      "Description": "Enter the unencrypted slack webhook url ifyou are not using encryption."
    },
    "SlackChannel": {
      "Type": "String",
      "Default": "#repo_alerts",
      "Description": "Enter the slack channel to send a message to. Channel names start with #."
    },
    "SlackUsername": {
      "Type": "String",
      "Default": "Github via AWS",
      "Description": "Enter the slack username to user for messages. An example would be 'Github via [your name]'s AWS Account'"
    },
    "IconEmoji": {
      "Type": "String",
      "Default": ":github:",
      "Description": "Enter the slack emoji icon to use for messages. An example would be :aws_logo:"
    },
    "OrgIcon": {
      "Type": "String",
      "Default": "http://cloudy.dog/images/logo.png",
      "Description": "Enter the url to icon for your organization for display in the footer of messages."
    },
    "OrgName": {
      "Type": "String",
      "Default": "Able Cloudy Dog",
      "Description": "Enter the name of your organisation for display in the footer of messages."
    },
    "APIEndpoint": {
      "Type": "String",
      "Default": "github",
      "Description": "Enter a name for the / API Endpoint you desire. For example https://{aws_apigateway_address}/Your Endpoint Name"
    }
  },
  "Resources": {
    "SSMcodePipelineBucket": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "codePipelineBucket",
        "Description" : "Enter the S3 bucket name that CodePipeline uses to pull the repository code from Github into.",
        "Type" : "String",
        "Value" : {
          "Ref": "codePipelineBucket"
        }
      }
    },
    "SSMcodePipelineArtifactName": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "codePipelineArtifactName",
        "Description" : "Enter the name of the CodePipeline Artifact .zip file in the CodePipeline S3 Bucket.",
        "Type" : "String",
        "Value" : "MySlackApp"
      }
    },
    "SSMUnencryptedHookURL": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "UnencryptedHookURL",
        "Description" : "Enter the unencrypted slack webhook url if you are not using encryption.",
        "Type" : "String",
        "Value" : {
          "Ref": "UnencryptedHookURL"
        }
      }
    },
    "SSMSlackChannel": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "SlackChannel",
        "Description" : "Enter the slack channel to send a message to. Channel names start with #.",
        "Type" : "String",
        "Value" : {
          "Ref": "SlackChannel"
        }
      }
    },
    "SSMSlackUsername": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "SlackUsername",
        "Description" : "Enter the slack username to user for messages. An example would be 'Github via [your name]'s AWS Account'",
        "Type" : "String",
        "Value" : {
          "Ref": "SlackUsername"
        }
      }
    },
    "SSMIconEmoji": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "IconEmoji",
        "Description" : "Enter the slack emoji icon to use for messages. An example would be :aws_logo:",
        "Type" : "String",
        "Value" : {
          "Ref": "IconEmoji"
        }
      }
    },
    "SSMOrgIcon": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "OrgIcon",
        "Description" : "Enter the url to icon for your organization for display in the footer of messages.",
        "Type" : "String",
        "Value" : {
          "Ref": "OrgIcon"
        }
      }
    },
    "SSMOrgName": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "OrgName",
        "Description" : "Enter the name of your organisation for display in the footer of messages.",
        "Type" : "String",
        "Value" : {
          "Ref": "OrgName"
        }
      }
    },
    "SSMLambdaSlackRole": {
      "DependsOn": "LambdaSlackRole",
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "LambdaSlackRole",
        "Description" : "Enter the Arn for the Lambda Slack IAM Role.",
        "Type" : "String",
        "Value" : {
          "Fn::GetAtt": [ "LambdaSlackRole", "Arn" ]
        }
      }
    },
    "SSMAPIEndpoint": {
      "Type" : "AWS::SSM::Parameter",
      "Properties" : {
        "Name" : "APIEndpoint",
        "Description" : "Enter a name for the / API Endpoint you desire. For example https://{aws_apigateway_address}/Your Endpoint Name",
        "Type" : "String",
        "Value" : {
          "Ref": "APIEndpoint"
        }
      }
    }, 
    "PipelineBucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : {
          "Ref": "codePipelineBucket"
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        },
        "Tags" : [
          { "Key": "Region", "Value": { "Ref": "AWS::Region" } },
          { "Key": "Name", "Value": { "Ref": "codePipelineBucket" } }
        ]
      }
    },
    "CodePiplineRole": {
      "DependsOn": [
        "LambdaSlackRole"
      ],
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CodePipeline",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "codepipeline:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "S3",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "CloudFormation",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:CreateStack",
                    "cloudformation:DescribeStacks",
                    "cloudformation:DeleteStack",
                    "cloudformation:UpdateStack",
                    "cloudformation:CreateChangeSet",
                    "cloudformation:ExecuteChangeSet",
                    "cloudformation:DeleteChangeSet",
                    "cloudformation:DescribeChangeSet",
                    "cloudformation:SetStackPolicy"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "SSMParameters",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ssm:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "KMS",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "kms:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "IAM",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "iam:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CloudFormationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::GetAtt": [ "CodePiplineRole", "Arn" ] },
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root" ] ] }
                ],
                "Service": [
                  "cloudformation.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "APIGateway",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "apigateway:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "Lambda",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:*",
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "SSMParameters",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ssm:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "KMS",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "kms:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "IAM",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "iam:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "S3",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "s3:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaSlackRole": {
      "DependsOn": [
        "PipelineBucket"
      ],
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ "", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root" ] ] }
                ],
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "RoleName": "LambdaSlackRole",
        "Policies": [
          {
            "PolicyName": "CloudWatchLogs",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "logs:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "Lambda",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "lambda:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "APIGateway",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "apigateway:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "KMS",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "kms:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "S3",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    { "Fn::GetAtt": [ "PipelineBucket", "Arn" ] }
                  ],
                  "Condition": {
                    "StringEquals": {
                        "x-amz-grant-read": { "Fn::Sub": "uri=http://acs.amazonaws.com/groups/global/AllUsers" }
                    }
                  }
                },
                {
                  "Action": [
                    "s3:DeleteObject",
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    { "Fn::Join": [ "\/", [ { "Fn::GetAtt": [ "PipelineBucket", "Arn" ] }, "*" ] ] }
                  ],
                  "Condition": {
                    "StringEquals": {
                        "x-amz-grant-read": { "Fn::Sub": "uri=http://acs.amazonaws.com/groups/global/AllUsers" }
                    }
                  }
                }
              ]
            }
          },
          {
            "PolicyName": "CodePipeline",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "codepipeline:*",
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "IAM",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "iam:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "CodePipelineKMS": {
      "DependsOn": [
        "LambdaSlackRole"
      ],
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "AWS KMS used by CodePipeline to encrypt Artifact files",
        "Enabled": true,
        "EnableKeyRotation": true,
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Id": "codepipeline-kms-policy",
          "Statement": [
            {
              "Sid": "Enable IAM User Permissions",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ ":", [ "arn:aws:iam:", { "Ref": "AWS::AccountId"}, "root" ] ] }
                ]
              },
              "Action": "kms:*",
              "Resource": "*"
            },
            {
              "Sid": "Allow access for Key Administrators",
              "Effect": "Allow",
              "Principal": {
                "AWS": [
                  { "Fn::Join": [ ":", [ "arn:aws:iam:", { "Ref": "AWS::AccountId"}, "root" ] ] }
                ]
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*",
                "kms:List*",
                "kms:Get*"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow attachment of persistent resources",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:CreateGrant",
                "kms:ListGrants",
                "kms:RevokeGrant"
              ],
              "Resource": "*",
              "Condition": {"Bool": {"kms:GrantIsForAWSResource": "true"}}
            },
            {
              "Sid": "Allow Lambda use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*",
                "kms:List*",
                "kms:Get*"
              ],
              "Resource": "*",
              "Condition": { "StringEquals": { "kms:ViaService": [ "lambda.eu-west-1.amazonaws.com", "lambda.eu-west-2.amazonaws.com" ] } }
            },
            {
              "Sid": "Allow CodePipeline use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*"
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:Describe*",
                "kms:List*",
                "kms:Get*"
              ],
              "Resource": "*",
              "Condition": { "StringEquals": { "kms:ViaService": [ "codepipeline.eu-west-1.amazonaws.com", "codepipeline.eu-west-2.amazonaws.com" ] } }
            }
          ]
        }
      }
    },
    "CodePipeline": {
      "DependsOn": [
        "PipelineBucket",
        "CodePiplineRole"
      ],
      "Type" : "AWS::CodePipeline::Pipeline",
      "Properties" : {
        "ArtifactStore" : {
          "Location" : {
            "Ref": "codePipelineBucket"
          },
          "Type" : "S3",
          "EncryptionKey": {
            "Id" : { "Ref": "CodePipelineKMS" },
            "Type" : "KMS"
          }
        },
        "RestartExecutionOnUpdate": true,
        "RoleArn" : {
          "Fn::GetAtt": [ "CodePiplineRole", "Arn" ]
        },
        "Stages" : [
          {
            "Actions": [
              {
                "InputArtifacts":[
    
                ],
                "Name":"Source",
                "ActionTypeId":{
                  "Category":"Source",
                  "Owner":"ThirdParty",
                  "Version":"1",
                  "Provider":"GitHub"
                },
                "OutputArtifacts":[
                  {
                    "Name": "MySlackApp"
                  }
                ],
                "Configuration":{
                  "Owner":{
                    "Ref":"GitHubUser"
                  },
                  "Repo":{
                    "Ref":"Repo"
                  },
                  "Branch":{
                    "Ref":"Branch"
                  },
                  "OAuthToken":{
                    "Ref":"GitHubToken"
                  },
                  "PollForSourceChanges": true
                },
                "RunOrder":1
              }
            ],
            "Name": "CheckoutGithubCode"
          },
          {
            "Actions": [
              {
                "InputArtifacts":[
                  {
                    "Name": "MySlackApp"
                  }
                ],
                "Name":"Deploy",
                "ActionTypeId":{
                  "Category":"Deploy",
                  "Owner":"AWS",
                  "Version":"1",
                  "Provider":"CloudFormation"
                },
                "OutputArtifacts":[
                  
                ],
                "Configuration":{
                  "ActionMode":{
                    "Ref": "StackActionMode"
                  },
                  "Capabilities": "CAPABILITY_IAM",
                  "RoleArn": {
                    "Fn::GetAtt": [ "CloudFormationRole", "Arn" ]
                  },
                  "StackName": {
                    "Ref": "StackName"
                  },
                  "TemplatePath": {
                    "Fn::Join": [ "::", [ "MySlackApp", "cloudformation.template" ] ]
                  },
                  "ParameterOverrides": "{ \"codePipelineArtifactName\": { \"Fn::GetArtifactAtt\" : [ \"MySlackApp\", \"ObjectKey\" ] } }"
                },
                "RunOrder":2
              }
            ],
            "Name": "DeployCloudFormation"
          }
        ]
      }
    }
  }
}
