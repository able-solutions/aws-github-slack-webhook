AWSTemplateFormatVersion: 2010-09-09
Description: ''
Parameters:
  SlackHook:
    Type: String
    Default: ''
    Description: Enter the unencrypted slack web-hook url if you are not using encryption.
  SlackChannel:
    Type: String
    Default: ''
    Description: 'Enter the slack channel to send a message to. Channel names start with #.'
  SlackUsername:
    Type: String
    Default: Github via AWS
    Description: >-
      Enter the slack username to act as message author. An example would be 'Github
      via [your name]'s AWS Account'
  GithubUsername:
    Type: String
    Default: ''
    Description: Enter your GitHub UserName
  GithubRepo:
    Type: String
    Default: ''
    Description: Enter the GitHub Repo name to pull from. Only the Name. not the URL
  GithubBranch:
    Type: String
    Default: ''
    Description: Enter the Branch to use from Repo. Only the Name. not the URL
Resources:
  SlackHookSSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: UnencryptedHookURL
      Description: Enter the Web Hook url created for the designated Slack Channel
      Type: String
      Value: !Ref SlackHook
  SlackChannelSSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: SlackChannel
      Description: >-
        Enter the Slack Channel to send a message to. Channel names start with
        #.
      Type: String
      Value: !Ref SlackChannel
  SlackUsernameSSMParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: SlackUsername
      Description: >-
        Enter the Slack username to user for messages. An example would be
        'Github via [your name]'s AWS Account'
      Type: String
      Value: !Ref SlackUsername
  CloudFormationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt 
                  - CodePiplineRole
                  - Arn
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
              Service:
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: APIGateway
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'apigateway:*'
                Resource: '*'
        - PolicyName: Lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'lambda:*'
                Resource:
                  - '*'
        - PolicyName: SSMParameters
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'ssm:*'
                Resource: '*'
        - PolicyName: KMS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'kms:*'
                Resource: '*'
        - PolicyName: IAM
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
  PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Join 
        - '-'
        - - codepipeline
          - bucket
          - !Ref 'AWS::Region'
          - !Ref 'AWS::AccountId'
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - CodePipeline
              - Bucket
              - !Ref 'AWS::AccountId'
        - Key: Project
          Value: AWS Github to Slack
  LambdaSlackRole:
    DependsOn:
      - PipelineBucket
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      RoleName: LambdaSlackRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'logs:*'
                Resource: '*'
        - PolicyName: Lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'lambda:*'
                Resource: '*'
        - PolicyName: APIGateway
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'apigateway:*'
                Resource: '*'
        - PolicyName: KMS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'kms:*'
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:ListBucket'
                Effect: Allow
                Resource:
                  - !GetAtt 
                    - PipelineBucket
                    - Arn
                Condition:
                  StringEquals:
                    x-amz-grant-read: !Sub 'uri=http://acs.amazonaws.com/groups/global/AllUsers'
              - Action:
                  - 's3:DeleteObject'
                  - 's3:GetObject'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Join 
                    - /
                    - - !GetAtt 
                        - PipelineBucket
                        - Arn
                      - '*'
                Condition:
                  StringEquals:
                    x-amz-grant-read: !Sub 'uri=http://acs.amazonaws.com/groups/global/AllUsers'
        - PolicyName: CodePipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'codepipeline:*'
                Resource: '*'
        - PolicyName: IAM
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
  LambdaSlackRoleParameter:
    DependsOn:
      - LambdaSlackRole
    Type: 'AWS::SSM::Parameter'
    Properties:
      Name: LambdaSlackRole
      Description: Enter the ARN for the LambdaSlackRole
      Type: String
      Value: !GetAtt 
        - LambdaSlackRole
        - Arn
  CodePiplineRole:
    DependsOn:
      - LambdaSlackRole
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: CodePipeline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'codepipeline:*'
                Resource: '*'
        - PolicyName: S3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
        - PolicyName: CloudFormation
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:SetStackPolicy'
                Resource:
                  - '*'
        - PolicyName: SSMParameters
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'ssm:*'
                Resource: '*'
        - PolicyName: KMS
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'kms:*'
                Resource: '*'
        - PolicyName: IAM
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'iam:*'
                Resource: '*'
  CodePipelineKMS:
    DependsOn:
      - LambdaSlackRole
    Type: 'AWS::KMS::Key'
    Properties:
      Description: AWS KMS used by CodePipeline to encrypt Artifact files
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: codepipeline-kms-policy
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ':'
                  - - 'arn:aws:iam:'
                    - !Ref 'AWS::AccountId'
                    - root
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Join 
                  - ':'
                  - - 'arn:aws:iam:'
                    - !Ref 'AWS::AccountId'
                    - root
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:TagResource'
              - 'kms:UntagResource'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:Describe*'
              - 'kms:List*'
              - 'kms:Get*'
            Resource: '*'
          - Sid: Allow attachment of persistent resources
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              Bool:
                'kms:GrantIsForAWSResource': 'true'
          - Sid: Allow Lambda use of the key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:Describe*'
              - 'kms:List*'
              - 'kms:Get*'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService':
                  - lambda.eu-west-1.amazonaws.com
                  - lambda.eu-west-2.amazonaws.com
          - Sid: Allow CodePipeline use of the key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:Describe*'
              - 'kms:List*'
              - 'kms:Get*'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService':
                  - codepipeline.eu-west-1.amazonaws.com
                  - codepipeline.eu-west-2.amazonaws.com
  CodePipeline:
    DependsOn:
      - PipelineBucket
      - CodePiplineRole
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Location: !Ref PipelineBucket
        Type: S3
        EncryptionKey:
          Id: !Ref CodePipelineKMS
          Type: KMS
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt 
        - CodePiplineRole
        - Arn
      Stages:
        - Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: SlackApp
              Configuration:
                Owner: !Ref GithubUsername
                Repo: !Ref GithubRepo
                Branch: !Ref GithubBranch
                OAuthToken: "{{resolve:secretsmanager:AbleSolutionsPersonalAccessToken:SecretString:able-solutions-personal-access-token}}"
                PollForSourceChanges: true
              RunOrder: 1
          Name: CheckoutGithubCode
        - Actions:
            - InputArtifacts:
                - Name: SlackApp
              Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: CloudFormation
              OutputArtifacts: []
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt 
                  - CloudFormationRole
                  - Arn
                StackName: github-aws-slack
                TemplatePath: !Join 
                  - '::'
                  - - SlackApp
                    - pipeline-test.yml
                #ParameterOverrides: >-
                #  { "codePipelineArtifactName": { "Fn::GetArtifactAtt" : [
                #  "SlackApp", "ObjectKey" ] } }
              RunOrder: 2
          Name: DeployCloudFormation
