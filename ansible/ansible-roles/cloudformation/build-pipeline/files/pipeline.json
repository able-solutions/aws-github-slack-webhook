{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This is the primary CloudFormation template that creates all API Gateway and Lambda resources, allowing Github to post event data to Slack.",
    "Parameters": {
      "codePipelineBucket": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "codePipelineBucket",
        "Description": "Enter the S3 bucket name that CodePipeline uses to pull the repository code from Github into."
      },
      "codePipelineArtifactName": {
        "Type": "String",
        "Default": "",
        "Description": "Enter the name of the CodePipeline Artifact .zip file in the CodePipeline S3 Bucket."
      },
      "codePipelineArtifactFolder": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "codePipelineArtifactName",
        "Description": "Enter the name of the CodePipeline Artifact .zip file in the CodePipeline S3 Bucket."
      },
      "UnencryptedHookURL": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "UnencryptedHookURL",
        "Description": "Enter the unencrypted slack webhook url ifyou are not using encryption."
      },
      "SlackChannel": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "SlackChannel",
        "Description": "Enter the slack channel to send a message to. Channel names start with #."
      },
      "SlackUsername": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "SlackUsername",
        "Description": "Enter the slack username to user for messages. An example would be 'Github via [your name]'s AWS Account'"
      },
      "IconEmoji": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "IconEmoji",
        "Description": "Enter the slack emoji icon to use for messages. An example would be :aws_logo:"
      },
      "OrgIcon": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "OrgIcon",
        "Description": "Enter the url to icon for your organization for display in the footer of messages."
      },
      "OrgName": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "OrgName",
        "Description": "Enter the name of your organisation for display in the footer of messages."
      },
      "LambdaSlackRole": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "LambdaSlackRole",
        "Description": "Enter the Arn of the Lambda Slack Role."
      },
      "APIEndpoint": {
        "Type": "AWS::SSM::Parameter::Value<String>",
        "Default": "APIEndpoint",
        "Description": "Enter a name for the / API Endpoint you desire. For example https://{aws_apigateway_address}/Your Endpoint Name"
      }
    },
    "Resources": {
      "APIGatewayRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "apigateway.amazonaws.com"
                  ]
                },
                "Action": "sts:AssumeRole"
              }
            ]
          },
          "Policies": [
            {
              "PolicyName": "CloudWatchLogs",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "logs:*",
                    "Resource": "*"
                  }
                ]
              }
            },
            {
              "PolicyName": "Lambda",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "lambda:*",
                    "Resource": "*"
                  }
                ]
              }
            },
            {
              "PolicyName": "APIGateway",
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": "apigateway:*",
                    "Resource": "*"
                  }
                ]
              }
            }
          ]
        }
      },
      "APIGatewayAccount": {
        "DependsOn": [
          "APIGatewayRole"
        ],
        "Type" : "AWS::ApiGateway::Account",
        "Properties" : {
          "CloudWatchRoleArn": {
            "Fn::GetAtt": [ "APIGatewayRole", "Arn" ]
          }
        }
      },
      "APIGatewayRestAPI": {
        "DependsOn": [
          "APIGatewayAccount"
        ],
        "Type": "AWS::ApiGateway::RestApi",
        "Properties": {
          "EndpointConfiguration": {
            "Types" : [
              "EDGE"
            ]
          },
          "Name": {
            "Ref": "APIEndpoint"
          }
        }
      },
      "APIGatewayResource": {
        "DependsOn": [
          "APIGatewayRestAPI"
        ],
        "Type": "AWS::ApiGateway::Resource",
        "Properties": {
          "RestApiId": {
            "Ref": "APIGatewayRestAPI"
          },
          "ParentId": {
            "Fn::GetAtt": [ "APIGatewayRestAPI", "RootResourceId" ]
          },
          "PathPart": {
            "Ref": "APIEndpoint"
          }
        }
      },
      "APIGatewayMethod": {
        "DependsOn": [
          "LambdaSlackFunction",
          "APIGatewayResource",
          "LambdaSlackPermissionPOST"
        ],
        "Type": "AWS::ApiGateway::Method",
        "Properties": {
          "AuthorizationType": "NONE",
          "HttpMethod": "POST",
          "ResourceId": {
            "Ref": "APIGatewayResource"
          },
          "RestApiId": {
            "Ref": "APIGatewayRestAPI"
          },
          "Integration": {
            "Type": "AWS",
            "IntegrationHttpMethod": "POST",
            "IntegrationResponses": [
              { "StatusCode": 200 }
            ],
            "Uri": {
              "Fn::Join": [
                "",
                [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "LambdaSlackFunction", "Arn" ] }, "/invocations" ]
              ]
            }
          },
          "MethodResponses": [
            { "StatusCode": 200 }
          ]
        }
      },
      "APIGatewayDeployment": {
        "DependsOn" : [
          "APIGatewayMethod"
        ],
        "Type": "AWS::ApiGateway::Deployment",
        "Properties": {
          "RestApiId": {
            "Ref": "APIGatewayRestAPI"
          },
          "Description": "Live deployment used for slack",
          "StageName": "slack"
        }
      },
      "LambdaSlackFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": "",
          "Handler": "slack.handler",
          "Role": { "Ref": "LambdaSlackRole" },
          "Code": {
            "S3Bucket": {
              "Ref": "codePipelineBucket"
            },
            "S3Key": {
              "Ref": "codePipelineArtifactName"
            }
          },
          "Environment": {
            "Variables": {
              "UnencryptedHookURL": {
                "Ref": "UnencryptedHookURL"
              },
              "SlackChannel": {
                "Ref": "SlackChannel"
              },
              "SlackUsername": {
                "Ref": "SlackUsername"
              },
              "IconEmoji": {
                "Ref": "IconEmoji"
              },
              "OrgIcon": {
                "Ref": "OrgIcon"
              },
              "OrgName": {
                "Ref": "OrgName"
              }
            }
          },
          "Runtime": "nodejs8.10",
          "MemorySize": "512",
          "Timeout": "60"
        }
      },
      "LambdaSlackPermissionPOST": {
        "Type": "AWS::Lambda::Permission",
        "DependsOn": [
          "LambdaSlackFunction",
          "APIGatewayRestAPI"
        ],
        "Properties": {
          "FunctionName": {
            "Fn::GetAtt": [ "LambdaSlackFunction", "Arn" ]
          },
          "Action": "lambda:invokeFunction",
          "Principal": "apigateway.amazonaws.com",
          "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref" : "AWS::AccountId" }, ":", { "Ref": "APIGatewayRestAPI" }, "/*/POST/", { "Ref": "APIEndpoint" } ] ] }
        }
      }
    },
    "Outputs": {
      "APIGatewayEndpoint": {
        "Value": {
          "Fn::Join": [ "", [ "https://", { "Ref": "APIGatewayRestAPI" }, ".execute-api.", { "Ref" : "AWS::Region" }, ".amazonaws.com/", "slack/",{ "Ref": "APIEndpoint" } ] ]
        }
      }
    }
  }